// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Crazy.Common {

  /// <summary>Holder for reflection information generated from BattleMessage.proto</summary>
  public static partial class BattleMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNCYXR0bGVNZXNzYWdlLnByb3RvEgxDcmF6eS5Db21tb24iTgoZQzJTX1Jl",
            "YWR5QmF0dGxlQmFycmllclJlcRINCgVScGNJZBhaIAEoBRIQCghCYXR0bGVJ",
            "ZBgBIAEoBBIQCghQbGF5ZXJJZBgCIAEoCSI9ChpTMkNNX1JlYWR5QmF0dGxl",
            "QmFycmllckFjaxINCgVScGNJZBhaIAEoBRIQCghCYXR0bGVJZBgBIAEoBCJM",
            "ChhDMlNfQmF0dGxlQ29tbWFuZE1lc3NhZ2USDQoFUnBjSWQYWiABKAUSEAoI",
            "QmF0dGxlSWQYASABKAQSDwoHTWVzc2FnZRgCIAEoCSJuChlTMkNfQm9keUlu",
            "aXRCYXR0bGVNZXNzYWdlEg0KBVJwY0lkGFogASgFEhAKCEJhdHRsZUlkGAEg",
            "ASgEEhAKCFBsYXllcklkGAIgASgJEhAKCEJvZHlUeXBlGAMgASgJEgwKBEJv",
            "ZHkYBCABKAwiTAoYQzJTX0NvbW1hbmRCYXR0bGVNZXNzYWdlEg0KBVJwY0lk",
            "GFogASgFEhAKCEJhdHRsZUlkGAEgASgEEg8KB0NvbW1hbmQYAiABKAwiSAoW",
            "UzJDX0V2ZW50QmF0dGxlTWVzc2FnZRINCgVScGNJZBhaIAEoBRIQCghCYXR0",
            "bGVJZBgBIAEoBBINCgVFdmVudBgCIAEoDCKFAQoiUzJDX1N5bmNIcFNoaWVs",
            "ZFN0YXRlQmF0dGxlTWVzc2FnZRINCgVScGNJZBhaIAEoBRIQCghCYXR0bGVJ",
            "ZBgBIAEoBBIPCgdBY3RvcklkGAIgASgEEhEKCUFjdG9yVHlwZRgDIAEoBRIK",
            "CgJIcBgEIAEoBRIOCgZTaGllbGQYBSABKAUilwIKIVMyQ19TeW5jUGh5c2lj",
            "c1N0YXRlQmF0dGxlTWVzc2FnZRINCgVScGNJZBhaIAEoBRIQCghCYXR0bGVJ",
            "ZBgBIAEoBBIPCgdBY3RvcklkGAIgASgEEhEKCUFjdG9yVHlwZRgDIAEoBRIS",
            "CgpQb3NpdGlvbl9YGAQgASgBEhIKClBvc2l0aW9uX1kYBSABKAESFAoMRm9y",
            "d2FyZEFuZ2xlGAYgASgBEhIKClZlbG9jaXR5X1gYByABKAESEgoKVmVsb2Np",
            "dHlfWRgIIAEoARIVCg1BbmdsZVZlbG9jaXR5GAkgASgBEg8KB0ZvcmNlX1gY",
            "CiABKAESDwoHRm9yY2VfWRgLIAEoARIOCgZUb3JxdWUYDCABKAEiSgoVQzJT",
            "X0V4aXRCYXR0bGVNZXNzYWdlEg0KBVJwY0lkGFogASgFEhAKCEJhdHRsZUlk",
            "GAEgASgEEhAKCFBsYXllcklkGAIgASgJIp8BChVTMkNfRXhpdEJhdHRsZU1l",
            "c3NhZ2USDQoFUnBjSWQYWiABKAUSEAoIQmF0dGxlSWQYASABKAQSEAoIUGxh",
            "eWVySWQYAiABKAkSOAoFc3RhdGUYAyABKA4yKS5DcmF6eS5Db21tb24uUzJD",
            "X0V4aXRCYXR0bGVNZXNzYWdlLlN0YXRlIhkKBVN0YXRlEggKBEZhaWwQABIG",
            "CgJPSxABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_ReadyBattleBarrierReq), global::Crazy.Common.C2S_ReadyBattleBarrierReq.Parser, new[]{ "RpcId", "BattleId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2CM_ReadyBattleBarrierAck), global::Crazy.Common.S2CM_ReadyBattleBarrierAck.Parser, new[]{ "RpcId", "BattleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_BattleCommandMessage), global::Crazy.Common.C2S_BattleCommandMessage.Parser, new[]{ "RpcId", "BattleId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_BodyInitBattleMessage), global::Crazy.Common.S2C_BodyInitBattleMessage.Parser, new[]{ "RpcId", "BattleId", "PlayerId", "BodyType", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_CommandBattleMessage), global::Crazy.Common.C2S_CommandBattleMessage.Parser, new[]{ "RpcId", "BattleId", "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_EventBattleMessage), global::Crazy.Common.S2C_EventBattleMessage.Parser, new[]{ "RpcId", "BattleId", "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_SyncHpShieldStateBattleMessage), global::Crazy.Common.S2C_SyncHpShieldStateBattleMessage.Parser, new[]{ "RpcId", "BattleId", "ActorId", "ActorType", "Hp", "Shield" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_SyncPhysicsStateBattleMessage), global::Crazy.Common.S2C_SyncPhysicsStateBattleMessage.Parser, new[]{ "RpcId", "BattleId", "ActorId", "ActorType", "PositionX", "PositionY", "ForwardAngle", "VelocityX", "VelocityY", "AngleVelocity", "ForceX", "ForceY", "Torque" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.C2S_ExitBattleMessage), global::Crazy.Common.C2S_ExitBattleMessage.Parser, new[]{ "RpcId", "BattleId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Crazy.Common.S2C_ExitBattleMessage), global::Crazy.Common.S2C_ExitBattleMessage.Parser, new[]{ "RpcId", "BattleId", "PlayerId", "State" }, null, new[]{ typeof(global::Crazy.Common.S2C_ExitBattleMessage.Types.State) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 与战斗系统相关的消息写在下面
  /// </summary>
  public sealed partial class C2S_ReadyBattleBarrierReq : pb::IMessage<C2S_ReadyBattleBarrierReq> {
    private static readonly pb::MessageParser<C2S_ReadyBattleBarrierReq> _parser = new pb::MessageParser<C2S_ReadyBattleBarrierReq>(() => new C2S_ReadyBattleBarrierReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ReadyBattleBarrierReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadyBattleBarrierReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadyBattleBarrierReq(C2S_ReadyBattleBarrierReq other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadyBattleBarrierReq Clone() {
      return new C2S_ReadyBattleBarrierReq(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ReadyBattleBarrierReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ReadyBattleBarrierReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ReadyBattleBarrierReq other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 与战斗系统相关的消息写在下面
  /// </summary>
  public sealed partial class S2CM_ReadyBattleBarrierAck : pb::IMessage<S2CM_ReadyBattleBarrierAck> {
    private static readonly pb::MessageParser<S2CM_ReadyBattleBarrierAck> _parser = new pb::MessageParser<S2CM_ReadyBattleBarrierAck>(() => new S2CM_ReadyBattleBarrierAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CM_ReadyBattleBarrierAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CM_ReadyBattleBarrierAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CM_ReadyBattleBarrierAck(S2CM_ReadyBattleBarrierAck other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CM_ReadyBattleBarrierAck Clone() {
      return new S2CM_ReadyBattleBarrierAck(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2CM_ReadyBattleBarrierAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CM_ReadyBattleBarrierAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CM_ReadyBattleBarrierAck other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗指令
  /// </summary>
  public sealed partial class C2S_BattleCommandMessage : pb::IMessage<C2S_BattleCommandMessage> {
    private static readonly pb::MessageParser<C2S_BattleCommandMessage> _parser = new pb::MessageParser<C2S_BattleCommandMessage>(() => new C2S_BattleCommandMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BattleCommandMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleCommandMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleCommandMessage(C2S_BattleCommandMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BattleCommandMessage Clone() {
      return new C2S_BattleCommandMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BattleCommandMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BattleCommandMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BattleCommandMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物体生成消息
  /// </summary>
  public sealed partial class S2C_BodyInitBattleMessage : pb::IMessage<S2C_BodyInitBattleMessage> {
    private static readonly pb::MessageParser<S2C_BodyInitBattleMessage> _parser = new pb::MessageParser<S2C_BodyInitBattleMessage>(() => new S2C_BodyInitBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BodyInitBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BodyInitBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BodyInitBattleMessage(S2C_BodyInitBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      playerId_ = other.playerId_;
      bodyType_ = other.bodyType_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BodyInitBattleMessage Clone() {
      return new S2C_BodyInitBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BodyType" field.</summary>
    public const int BodyTypeFieldNumber = 3;
    private string bodyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BodyType {
      get { return bodyType_; }
      set {
        bodyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Body" field.</summary>
    public const int BodyFieldNumber = 4;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BodyInitBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BodyInitBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (BodyType != other.BodyType) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (BodyType.Length != 0) hash ^= BodyType.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (BodyType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BodyType);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Body);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (BodyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BodyType);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BodyInitBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.BodyType.Length != 0) {
        BodyType = other.BodyType;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            BodyType = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///以下是正常的逻辑
  ///指令生成消息
  /// </summary>
  public sealed partial class C2S_CommandBattleMessage : pb::IMessage<C2S_CommandBattleMessage> {
    private static readonly pb::MessageParser<C2S_CommandBattleMessage> _parser = new pb::MessageParser<C2S_CommandBattleMessage>(() => new C2S_CommandBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_CommandBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CommandBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CommandBattleMessage(C2S_CommandBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      command_ = other.command_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_CommandBattleMessage Clone() {
      return new C2S_CommandBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "Command" field.</summary>
    public const int CommandFieldNumber = 2;
    private pb::ByteString command_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_CommandBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_CommandBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (Command != other.Command) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Command);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Command);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_CommandBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Command = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_EventBattleMessage : pb::IMessage<S2C_EventBattleMessage> {
    private static readonly pb::MessageParser<S2C_EventBattleMessage> _parser = new pb::MessageParser<S2C_EventBattleMessage>(() => new S2C_EventBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_EventBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EventBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EventBattleMessage(S2C_EventBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      event_ = other.event_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_EventBattleMessage Clone() {
      return new S2C_EventBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "Event" field.</summary>
    public const int EventFieldNumber = 2;
    private pb::ByteString event_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_EventBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_EventBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (Event != other.Event) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (Event.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Event);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Event);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_EventBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Event = input.ReadBytes();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_SyncHpShieldStateBattleMessage : pb::IMessage<S2C_SyncHpShieldStateBattleMessage> {
    private static readonly pb::MessageParser<S2C_SyncHpShieldStateBattleMessage> _parser = new pb::MessageParser<S2C_SyncHpShieldStateBattleMessage>(() => new S2C_SyncHpShieldStateBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SyncHpShieldStateBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncHpShieldStateBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncHpShieldStateBattleMessage(S2C_SyncHpShieldStateBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      actorId_ = other.actorId_;
      actorType_ = other.actorType_;
      hp_ = other.hp_;
      shield_ = other.shield_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncHpShieldStateBattleMessage Clone() {
      return new S2C_SyncHpShieldStateBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 2;
    private ulong actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "ActorType" field.</summary>
    public const int ActorTypeFieldNumber = 3;
    private int actorType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActorType {
      get { return actorType_; }
      set {
        actorType_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Shield" field.</summary>
    public const int ShieldFieldNumber = 5;
    private int shield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SyncHpShieldStateBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SyncHpShieldStateBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (ActorId != other.ActorId) return false;
      if (ActorType != other.ActorType) return false;
      if (Hp != other.Hp) return false;
      if (Shield != other.Shield) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (ActorId != 0UL) hash ^= ActorId.GetHashCode();
      if (ActorType != 0) hash ^= ActorType.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Shield != 0) hash ^= Shield.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (ActorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ActorId);
      }
      if (ActorType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorType);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (Shield != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Shield);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (ActorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActorId);
      }
      if (ActorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorType);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Shield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shield);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SyncHpShieldStateBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.ActorId != 0UL) {
        ActorId = other.ActorId;
      }
      if (other.ActorType != 0) {
        ActorType = other.ActorType;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Shield != 0) {
        Shield = other.Shield;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ActorId = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorType = input.ReadInt32();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 40: {
            Shield = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_SyncPhysicsStateBattleMessage : pb::IMessage<S2C_SyncPhysicsStateBattleMessage> {
    private static readonly pb::MessageParser<S2C_SyncPhysicsStateBattleMessage> _parser = new pb::MessageParser<S2C_SyncPhysicsStateBattleMessage>(() => new S2C_SyncPhysicsStateBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SyncPhysicsStateBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncPhysicsStateBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncPhysicsStateBattleMessage(S2C_SyncPhysicsStateBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      actorId_ = other.actorId_;
      actorType_ = other.actorType_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      forwardAngle_ = other.forwardAngle_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      angleVelocity_ = other.angleVelocity_;
      forceX_ = other.forceX_;
      forceY_ = other.forceY_;
      torque_ = other.torque_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SyncPhysicsStateBattleMessage Clone() {
      return new S2C_SyncPhysicsStateBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 2;
    private ulong actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "ActorType" field.</summary>
    public const int ActorTypeFieldNumber = 3;
    private int actorType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActorType {
      get { return actorType_; }
      set {
        actorType_ = value;
      }
    }

    /// <summary>Field number for the "Position_X" field.</summary>
    public const int PositionXFieldNumber = 4;
    private double positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "Position_Y" field.</summary>
    public const int PositionYFieldNumber = 5;
    private double positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "ForwardAngle" field.</summary>
    public const int ForwardAngleFieldNumber = 6;
    private double forwardAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ForwardAngle {
      get { return forwardAngle_; }
      set {
        forwardAngle_ = value;
      }
    }

    /// <summary>Field number for the "Velocity_X" field.</summary>
    public const int VelocityXFieldNumber = 7;
    private double velocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "Velocity_Y" field.</summary>
    public const int VelocityYFieldNumber = 8;
    private double velocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "AngleVelocity" field.</summary>
    public const int AngleVelocityFieldNumber = 9;
    private double angleVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AngleVelocity {
      get { return angleVelocity_; }
      set {
        angleVelocity_ = value;
      }
    }

    /// <summary>Field number for the "Force_X" field.</summary>
    public const int ForceXFieldNumber = 10;
    private double forceX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ForceX {
      get { return forceX_; }
      set {
        forceX_ = value;
      }
    }

    /// <summary>Field number for the "Force_Y" field.</summary>
    public const int ForceYFieldNumber = 11;
    private double forceY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ForceY {
      get { return forceY_; }
      set {
        forceY_ = value;
      }
    }

    /// <summary>Field number for the "Torque" field.</summary>
    public const int TorqueFieldNumber = 12;
    private double torque_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Torque {
      get { return torque_; }
      set {
        torque_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SyncPhysicsStateBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SyncPhysicsStateBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (ActorId != other.ActorId) return false;
      if (ActorType != other.ActorType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForwardAngle, other.ForwardAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityX, other.VelocityX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VelocityY, other.VelocityY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AngleVelocity, other.AngleVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForceX, other.ForceX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForceY, other.ForceY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Torque, other.Torque)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (ActorId != 0UL) hash ^= ActorId.GetHashCode();
      if (ActorType != 0) hash ^= ActorType.GetHashCode();
      if (PositionX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionY);
      if (ForwardAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForwardAngle);
      if (VelocityX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityX);
      if (VelocityY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VelocityY);
      if (AngleVelocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AngleVelocity);
      if (ForceX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForceX);
      if (ForceY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForceY);
      if (Torque != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Torque);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (ActorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ActorId);
      }
      if (ActorType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorType);
      }
      if (PositionX != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(PositionX);
      }
      if (PositionY != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PositionY);
      }
      if (ForwardAngle != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ForwardAngle);
      }
      if (VelocityX != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(VelocityX);
      }
      if (VelocityY != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(VelocityY);
      }
      if (AngleVelocity != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(AngleVelocity);
      }
      if (ForceX != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ForceX);
      }
      if (ForceY != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(ForceY);
      }
      if (Torque != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Torque);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (ActorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActorId);
      }
      if (ActorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorType);
      }
      if (PositionX != 0D) {
        size += 1 + 8;
      }
      if (PositionY != 0D) {
        size += 1 + 8;
      }
      if (ForwardAngle != 0D) {
        size += 1 + 8;
      }
      if (VelocityX != 0D) {
        size += 1 + 8;
      }
      if (VelocityY != 0D) {
        size += 1 + 8;
      }
      if (AngleVelocity != 0D) {
        size += 1 + 8;
      }
      if (ForceX != 0D) {
        size += 1 + 8;
      }
      if (ForceY != 0D) {
        size += 1 + 8;
      }
      if (Torque != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SyncPhysicsStateBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.ActorId != 0UL) {
        ActorId = other.ActorId;
      }
      if (other.ActorType != 0) {
        ActorType = other.ActorType;
      }
      if (other.PositionX != 0D) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0D) {
        PositionY = other.PositionY;
      }
      if (other.ForwardAngle != 0D) {
        ForwardAngle = other.ForwardAngle;
      }
      if (other.VelocityX != 0D) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0D) {
        VelocityY = other.VelocityY;
      }
      if (other.AngleVelocity != 0D) {
        AngleVelocity = other.AngleVelocity;
      }
      if (other.ForceX != 0D) {
        ForceX = other.ForceX;
      }
      if (other.ForceY != 0D) {
        ForceY = other.ForceY;
      }
      if (other.Torque != 0D) {
        Torque = other.Torque;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ActorId = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorType = input.ReadInt32();
            break;
          }
          case 33: {
            PositionX = input.ReadDouble();
            break;
          }
          case 41: {
            PositionY = input.ReadDouble();
            break;
          }
          case 49: {
            ForwardAngle = input.ReadDouble();
            break;
          }
          case 57: {
            VelocityX = input.ReadDouble();
            break;
          }
          case 65: {
            VelocityY = input.ReadDouble();
            break;
          }
          case 73: {
            AngleVelocity = input.ReadDouble();
            break;
          }
          case 81: {
            ForceX = input.ReadDouble();
            break;
          }
          case 89: {
            ForceY = input.ReadDouble();
            break;
          }
          case 97: {
            Torque = input.ReadDouble();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2S_ExitBattleMessage : pb::IMessage<C2S_ExitBattleMessage> {
    private static readonly pb::MessageParser<C2S_ExitBattleMessage> _parser = new pb::MessageParser<C2S_ExitBattleMessage>(() => new C2S_ExitBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ExitBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ExitBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ExitBattleMessage(C2S_ExitBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ExitBattleMessage Clone() {
      return new C2S_ExitBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ExitBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ExitBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ExitBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S2C_ExitBattleMessage : pb::IMessage<S2C_ExitBattleMessage> {
    private static readonly pb::MessageParser<S2C_ExitBattleMessage> _parser = new pb::MessageParser<S2C_ExitBattleMessage>(() => new S2C_ExitBattleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ExitBattleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Crazy.Common.BattleMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ExitBattleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ExitBattleMessage(S2C_ExitBattleMessage other) : this() {
      rpcId_ = other.rpcId_;
      battleId_ = other.battleId_;
      playerId_ = other.playerId_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ExitBattleMessage Clone() {
      return new S2C_ExitBattleMessage(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 90;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private ulong battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "PlayerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Crazy.Common.S2C_ExitBattleMessage.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Crazy.Common.S2C_ExitBattleMessage.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ExitBattleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ExitBattleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (BattleId != other.BattleId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (BattleId != 0UL) hash ^= BattleId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BattleId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (BattleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ExitBattleMessage other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.BattleId != 0UL) {
        BattleId = other.BattleId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt64();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            State = (global::Crazy.Common.S2C_ExitBattleMessage.Types.State) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2C_ExitBattleMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("Fail")] Fail = 0,
        [pbr::OriginalName("OK")] Ok = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
